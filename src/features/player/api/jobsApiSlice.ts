// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { getSeconds } from "../helpers/getSeconds"
import {
  type PlayerFrameIndex,
  type PlayerGetJobQueryResult,
  PlayerMetadataMetaKey,
  type PlayerProcessedFrames,
} from "./jobsApiSlice.dto"
import { JobsApiEndpoints } from "./jobsApiSlice.endpoints"

type JobMetadataApiResponse = {} & PlayerProcessedFrames

// Define a service using a base URL and expected endpoints

export const jobsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: JobsApiEndpoints.base }),
  reducerPath: "jobsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Jobs"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getJob: build.query<PlayerGetJobQueryResult, number>({
      query: jobId => JobsApiEndpoints.metadata(jobId),
      transformResponse: (response: JobMetadataApiResponse, requestMetadata, jobId) => {
        const { [PlayerMetadataMetaKey]: meta, ...frames } = response

        let frame_meta: Array<string> = []

        let start_time = 0
        let frame_time = 0

        const framesIndex: PlayerFrameIndex = []

        Object.entries(frames).forEach(([file, fileMeta]) => {
          const { video_time } = fileMeta
          frame_time = video_time ? getSeconds(video_time) : start_time
          if (start_time === frame_time) {
            frame_meta.push(file)
          } else {
            for (let i = start_time; i <= frame_time; i++) {
              framesIndex[i] = frame_meta
            }
            frame_meta = [file]
            start_time = frame_time
          }
        })

        return {
          meta,
          src: JobsApiEndpoints.video(jobId, true),
          frames: {
            byIds: frames,
            byIndex: framesIndex,
          },
        }
      },

      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Jobs", id }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `jobsApiSlice.endpoints.getQuotes.useQuery`
export const { useGetJobQuery } = jobsApiSlice
